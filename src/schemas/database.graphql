#
# Model Types
#

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(filter: UserFilter): User!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]
  _postsMeta(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

#
# Other Types
#

enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

type _QueryMeta {
  count: Int!
}

input CreatePost {
  isPublished: Boolean!
  title: String!
  text: String!
  authorId: ID
  author: PostauthorUser
}

input CreateUser {
  email: String!
  password: String!
  name: String!
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

scalar DateTime

type Mutation {
  createPost(
    isPublished: Boolean!
    title: String!
    text: String!
    authorId: ID
    author: PostauthorUser
  ): Post
  createUser(
    email: String!
    password: String!
    name: String!
    postsIds: [ID!]
    posts: [UserpostsPost!]
  ): User
  updatePost(
    isPublished: Boolean
    title: String
    text: String
    authorId: ID
    author: PostauthorUser
    by: PostSelector!
  ): Post
  updateUser(
    email: String
    password: String
    name: String
    postsIds: [ID!]
    posts: [UserpostsPost!]
    by: UserSelector!
  ): User
  updateOrCreatePost(update: UpdatePost!, create: CreatePost!): Post
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  deletePost(by: PostSelector!): Post
  deleteUser(by: UserSelector!): User
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PostauthorUser {
  email: String!
  password: String!
  name: String!
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
  count: Int!
}

type PostEdge {
  node: Post!
  cursor: String!
}

input PostFilter {
  AND: [PostFilter!]
  OR: [PostFilter!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserFilter
}

enum PostOrderBy {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

input PostSelector {
  id: ID
}

input PostSubscriptionFilter {
  AND: [PostSubscriptionFilter!]
  OR: [PostSubscriptionFilter!]
  mutation_in: [_ModelMutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostSubscriptionFilterNode
}

input PostSubscriptionFilterNode {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserFilter
}

type PostSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

type Query {
  posts(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]!
  users(
    filter: UserFilter
    orderBy: UserOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]!
  post(id: ID): Post
  user(id: ID, email: String): User
  postsConnection(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostConnection!
  usersConnection(
    filter: UserFilter
    orderBy: UserOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  Post(filter: PostSubscriptionFilter): PostSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

input UpdatePost {
  isPublished: Boolean
  title: String
  text: String
  authorId: ID
  author: PostauthorUser
}

input UpdateUser {
  email: String
  password: String
  name: String
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
  count: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
}

enum UserOrderBy {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
}

input UserpostsPost {
  isPublished: Boolean!
  title: String!
  text: String!
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

input UserSelector {
  id: ID
  email: String
}

input UserSubscriptionFilter {
  AND: [UserSubscriptionFilter!]
  OR: [UserSubscriptionFilter!]
  mutation_in: [_ModelMutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}
